import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Zap, 
  Search,
  Lock,
  Unlock,
  Bug,
  Eye,
  Activity,
  Globe,
  Server,
  Wifi
} from 'lucide-react';
import { useTheme } from '../contexts/ThemeContext';

interface ScanResult {
  id: string;
  type: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  port?: number;
  service?: string;
  cve?: string;
  solution: string;
}

const VulnerabilityScanner: React.FC = () => {
  const { isDark } = useTheme();
  const [targetUrl, setTargetUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const [scanProgress, setScanProgress] = useState(0);

  const mockScanResults: ScanResult[] = [
    {
      id: '1',
      type: 'critical',
      title: 'SQL Injection Vulnerability',
      description: 'Potential SQL injection found in login form',
      service: 'HTTP',
      port: 80,
      cve: 'CWE-89',
      solution: 'Use parameterized queries and input validation'
    },
    {
      id: '2',
      type: 'high',
      title: 'Cross-Site Scripting (XSS)',
      description: 'Stored XSS vulnerability in comment section',
      service: 'HTTP',
      port: 443,
      cve: 'CWE-79',
      solution: 'Implement proper output encoding and CSP headers'
    },
    {
      id: '3',
      type: 'medium',
      title: 'Weak SSL/TLS Configuration',
      description: 'Server supports weak cipher suites',
      service: 'HTTPS',
      port: 443,
      solution: 'Update SSL/TLS configuration to use strong ciphers'
    },
    {
      id: '4',
      type: 'low',
      title: 'Directory Listing Enabled',
      description: 'Web server allows directory browsing',
      service: 'HTTP',
      port: 80,
      solution: 'Disable directory listing in web server configuration'
    }
  ];

  const startScan = async () => {
    if (!targetUrl) return;
    
    setIsScanning(true);
    setScanProgress(0);
    setScanResults([]);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanResults(mockScanResults);
          return 100;
        }
        return prev + 10;
      });
    }, 300);
  };

  const getSeverityColor = (type: ScanResult['type']) => {
    switch (type) {
      case 'critical': return 'text-red-500';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-blue-500';
      case 'info': return 'text-gray-500';
      default: return 'text-gray-500';
    }
  };

  const getSeverityIcon = (type: ScanResult['type']) => {
    switch (type) {
      case 'critical': return AlertTriangle;
      case 'high': return AlertTriangle;
      case 'medium': return Eye;
      case 'low': return Bug;
      case 'info': return Activity;
      default: return Activity;
    }
  };

  return (
    <div className={`p-6 rounded-xl ${isDark ? 'bg-gray-800' : 'bg-white'} border ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
      <div className="flex items-center space-x-3 mb-6">
        <div className={`p-2 rounded-lg ${isDark ? 'bg-red-600' : 'bg-red-100'}`}>
          <Shield className={`w-5 h-5 ${isDark ? 'text-white' : 'text-red-600'}`} />
        </div>
        <div>
          <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
            Vulnerability Scanner
          </h3>
          <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
            Scan websites for common security vulnerabilities
          </p>
        </div>
      </div>

      {/* Scan Input */}
      <div className="space-y-4 mb-6">
        <div className="flex space-x-3">
          <div className="flex-1">
            <input
              type="url"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              placeholder="Enter target URL (e.g., https://example.com)"
              className={`w-full p-3 rounded-lg border ${
                isDark 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                  : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
              } focus:ring-2 focus:ring-red-500 focus:border-transparent`}
              disabled={isScanning}
            />
          </div>
          <button
            onClick={startScan}
            disabled={!targetUrl || isScanning}
            className={`px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2 ${
              !targetUrl || isScanning
                ? `${isDark ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-500'} cursor-not-allowed`
                : 'bg-red-600 hover:bg-red-700 text-white'
            }`}
          >
            {isScanning ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                <span>Scanning...</span>
              </>
            ) : (
              <>
                <Search className="w-4 h-4" />
                <span>Scan</span>
              </>
            )}
          </button>
        </div>

        {/* Progress Bar */}
        {isScanning && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                Scanning in progress...
              </span>
              <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                {scanProgress}%
              </span>
            </div>
            <div className={`w-full bg-gray-200 ${isDark ? 'bg-gray-700' : ''} rounded-full h-2`}>
              <div 
                className="bg-red-500 h-2 rounded-full transition-all duration-300"
                style={{width: `${scanProgress}%`}}
              ></div>
            </div>
          </div>
        )}
      </div>

      {/* Scan Results */}
      {scanResults.length > 0 && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h4 className={`font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              Scan Results ({scanResults.length} issues found)
            </h4>
            <div className="flex space-x-2">
              {['critical', 'high', 'medium', 'low'].map((severity) => {
                const count = scanResults.filter(r => r.type === severity).length;
                return count > 0 ? (
                  <span
                    key={severity}
                    className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(severity as any)} bg-opacity-20`}
                  >
                    {count} {severity}
                  </span>
                ) : null;
              })}
            </div>
          </div>

          <div className="space-y-3">
            {scanResults.map((result, index) => {
              const IconComponent = getSeverityIcon(result.type);
              return (
                <motion.div
                  key={result.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`p-4 rounded-lg border ${
                    isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
                  }`}
                >
                  <div className="flex items-start space-x-3">
                    <IconComponent className={`w-5 h-5 mt-1 ${getSeverityColor(result.type)}`} />
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h5 className={`font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>
                          {result.title}
                        </h5>
                        <span className={`px-2 py-1 text-xs rounded-full uppercase font-semibold ${getSeverityColor(result.type)} bg-opacity-20`}>
                          {result.type}
                        </span>
                        {result.cve && (
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            isDark ? 'bg-gray-600 text-gray-300' : 'bg-gray-200 text-gray-700'
                          }`}>
                            {result.cve}
                          </span>
                        )}
                      </div>
                      <p className={`text-sm mb-3 ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                        {result.description}
                      </p>
                      {(result.service || result.port) && (
                        <div className="flex items-center space-x-4 mb-3 text-sm">
                          {result.service && (
                            <div className="flex items-center space-x-1">
                              <Server className="w-4 h-4 text-gray-500" />
                              <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                                {result.service}
                              </span>
                            </div>
                          )}
                          {result.port && (
                            <div className="flex items-center space-x-1">
                              <Globe className="w-4 h-4 text-gray-500" />
                              <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                                Port {result.port}
                              </span>
                            </div>
                          )}
                        </div>
                      )}
                      <div className={`p-3 rounded-lg ${isDark ? 'bg-gray-800' : 'bg-white'} border ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
                        <h6 className={`text-sm font-medium mb-1 ${isDark ? 'text-emerald-400' : 'text-emerald-600'}`}>
                          Recommended Solution:
                        </h6>
                        <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                          {result.solution}
                        </p>
                      </div>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>
      )}

      {/* Educational Note */}
      <div className={`mt-6 p-4 rounded-lg border ${
        isDark ? 'bg-blue-900/20 border-blue-700' : 'bg-blue-50 border-blue-200'
      }`}>
        <div className="flex items-start space-x-3">
          <Activity className="w-5 h-5 text-blue-500 mt-1" />
          <div>
            <h6 className={`font-medium mb-1 ${isDark ? 'text-blue-400' : 'text-blue-700'}`}>
              Educational Purpose Only
            </h6>
            <p className={`text-sm ${isDark ? 'text-blue-300' : 'text-blue-600'}`}>
              This scanner is for educational purposes. Only scan websites you own or have explicit permission to test.
              Unauthorized scanning may be illegal in your jurisdiction.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScanner;